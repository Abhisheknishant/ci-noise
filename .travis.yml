language: c
dist: bionic
cache: ccache
branches:
  except:
    - /^(wip\/)?(appveyor)(\-.+)?$/
    - /^(wip\/)?(gh\-actions)(\-.+)?$/

env:
  global:
  # - BUILD_TYPE="Coverage"
  # - ARCH_FLAGS="-march=native"
  # - BUILD_CPP_TESTS=ON
  # - CMAKE_GENERATOR='Ninja'
  # - RUN_TESTS=true
  # - OPTIMIZATION_FLAGS=''
  # - BUILD_SYSTEM='ninja'

jobs:
  include:
  # - name: amalgamate
  #   if: branch = master AND type != pull_request
  #   script:
  #   - |
  #     if [ ! -e amalgamated/x86 ]; then
  #       mkdir -p amalgamated/x86;
  #       (cd simde && for header in x86/*.h; do
  #         ../amalgamate.py "$header" > ../amalgamated/"$header"
  #       done);
  #     fi
  #   deploy:
  #     provider: pages
  #     target_branch: amalgamated
  #     local_dir: amalgamated
  #     github_token: $GITHUB_TOKEN
  #     skip_cleanup: true
  #     keep_history: true

  # - name: "gcc-9"
  #   compiler: gcc-9

  # - name: "clang-10"
  #   compiler: clang-10

  # - name: "gcc-8 x86"
  #   compiler: gcc-8
  #   env:
  #   - ARCH_FLAGS='-m32'
  #   addons:
  #     apt:
  #       packages:
  #       - libc6:i386
  #       - libc6-dev:i386
  #       - binutils:i386
  #       - binutils-i686-linux-gnu:i386

  # - name: "aarch64"
  #   compiler: gcc-9
  #   arch: arm64

  - name: "ppc64le"
    arch: ppc64le
  #   env:
  #   - ARCH_FLAGS="-mcpu=native"
  #   addons:
  #     apt:
  #       packages:
  #       - gcc
  #       - g++

  # - name: "-DSIMDE_NO_SHUFFLE_VECTOR"
  #   env:
  #   - COMPILER_FLAGS=-DSIMDE_NO_SHUFFLE_VECTOR
  #   - OPTIMIZATION_FLAGS=''

  # - name: "armv8-a"
  #   arch: arm64
  #   env:
  #   - C_COMPILER=arm-linux-gnueabihf-gcc
  #   - CXX_COMPILER=arm-linux-gnueabihf-g++
  #   - ARCH_FLAGS="-march=armv8-a"
  #   install:
  #   - sudo dpkg --add-architecture armhf
  #   - sudo apt-get update
  #   - sudo apt-get -y install crossbuild-essential-armhf libc6:armhf libstdc++6:armhf

  # - name: "armv7-a"
  #   arch: arm64
  #   env:
  #   - C_COMPILER=arm-linux-gnueabihf-gcc
  #   - CXX_COMPILER=arm-linux-gnueabihf-g++
  #   - ARCH_FLAGS="-march=armv7-a"
  #   install:
  #   - sudo dpkg --add-architecture armhf
  #   - sudo apt-get update
  #   - sudo apt-get -y install crossbuild-essential-armhf libc6:armhf libstdc++6:armhf

  # - name: icc
  #   compiler: icc
  #   env:
  #   - C_COMPILER=icc
  #   - CXX_COMPILER=icpc
  #   - COMPILER_FLAGS='-wd13200 -wd13203'
  #   install:
  #   - source /opt/intel/inteloneapi/compiler/latest/env/vars.sh
  #   addons:
  #     apt:
  #       sources:
  #       - sourceline: 'deb https://apt.repos.intel.com/oneapi all main'
  #         key_url: 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB'
  #       packages:
  #       - intel-oneapi-icc

  # - name: "pgcc"
  #   env:
  #   - C_COMPILER=pgcc
  #   - CXX_COMPILER=pgc++
  #   - ARCH_FLAGS="-m64"
  #   - BUILD_CPP_TESTS=OFF
  #   install:
  #   - curl 'https://raw.githubusercontent.com/nemequ/pgi-travis/master/install-pgi.sh' | /bin/sh

  # - name: "xlc"
  #   arch: ppc64le
  #   install:
  #   - wget -q https://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/public.gpg -O- | sudo apt-key add -
  #   - echo "deb https://public.dhe.ibm.com/software/server/POWER/Linux/xl-compiler/eval/ppc64le/ubuntu/ ${TRAVIS_DIST} main" >> /etc/apt/sources.list
  #   - sudo apt-get update
  #   - export XLC_VERSION="$(apt-cache search '^xlc\.[0-9]+\.[0-9]+\.[0-9]+$' | awk '{ print substr($1, 5) }')"
  #   - sudo apt-get install "xlc.${XLC_VERSION}" "xlc-license-community.${XLC_VERSION}"
  #   - sudo /opt/ibm/xlC/${XLC_VERSION}/bin/xlc_configure <<< 1 >/dev/null
  #   env:
  #   - ARCH_FLAGS=-qarch=auto
  #   - C_COMPILER=xlc
  #   - CXX_COMPILER=xlc++

  # - name: osx
  #   os: osx

  # - name: msvc x86
  #   os: windows
  #   env:
  #   - ARCH_FLAGS="/arch:AVX2"
  #   - CMAKE_GENERATOR="Visual Studio 15 2017"
  #   - OPTIMIZATION_FLAGS="/Ox"

  # - name: msvc x86_64
  #   os: windows
  #   env:
  #   - ARCH_FLAGS="/arch:AVX2"
  #   - CMAKE_GENERATOR="Visual Studio 15 2017 Win64"
  #   - OPTIMIZATION_FLAGS="/Ox"

  # - name: msvc arm
  #   os: windows
  #   env:
  #   - ARCH_FLAGS=""
  #   - CMAKE_GENERATOR="Visual Studio 15 2017 ARM"
  #   - RUN_TESTS=false
  #   - OPTIMIZATION_FLAGS="/Ox"

  # - name: "gcc-7 amd64"
  #   compiler: gcc
  #   arch: amd64
  #   env:

  # - name: "clang-7 amd64"
  #   arch: amd64
  #   compiler: clang

  # - name: gcc-4.8
  #   dist: trusty
  #   addons:
  #     apt:
  #       packages:
  #       - cmake
  #       sources:
  #       - kalakris-cmake

  # - name: s390x
  #   arch: s390x

  # - name: emscripten
  #   compiler: emcc
  #   env:
  #   - ARCH_FLAGS="-msimd128"
  #   - C_COMPILER=emcc
  #   - CXX_COMPILER=emcc
  #   - CONFIGURE_WRAPPER=emconfigure
  #   - BUILD_WRAPPER=emmake
  #   - EXECUTABLE_EXTENSION=.js
  #   - TEST_WRAPPER="${HOME}/.jsvu/v8 --experimental-wasm-simd"
  #   - OPTIMIZATION_FLAGS="-O3 -s SIMD=1"
  #   addons:
  #     apt:
  #       packages:
  #       - nodejs
  #   install:
  #   - |
  #     git clone https://github.com/emscripten-core/emsdk.git
  #     emsdk/emsdk update-tags
  #     emsdk/emsdk install tot
  #     emsdk/emsdk activate tot
  #     source emsdk/emsdk_env.sh
  #   - |
  #     npm install jsvu -g
  #     jsvu --os=linux64 --engines=v8

  # allow_failures:
  # # - name: emscripten    

before_install:
- if [ -e /proc/cpuinfo ]; then cat /proc/cpuinfo; fi
- if [ -e /proc/meminfo ]; then cat /proc/meminfo; fi

install:
- sudo apt-get install -y python3-pip python3-setuptools
- pip3 install scikit-build  meson ninja

- ./.ci-install-compiler.sh
- source ~/.ci-compiler-config.sh

script:
- cd test
- meson -Db_coverage=true build
- ninja -C build --verbose
- ./run-tests

# - if [ "x${BUILD_SYSTEM}" = "xcmake" ]; then
#     mkdir "${TRAVIS_BUILD_DIR}/test/build" && cd "${TRAVIS_BUILD_DIR}/test/build" && \
#     ${CONFIGURE_WRAPPER} cmake .. \
#       -G "${CMAKE_GENERATOR}" \
#       -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" \
#       -DBUILD_CPP_TESTS=${BUILD_CPP_TESTS} \
#       -DCMAKE_CROSSCOMPILING_EMULATOR="${TEST_WRAPPER}" \
#       -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
#       -DCMAKE_C_FLAGS="${ARCH_FLAGS} ${OPTIMIZATION_FLAGS} ${COMPILER_FLAGS} ${CFLAGS}" \
#       -DCMAKE_CXX_FLAGS="${ARCH_FLAGS} ${OPTIMIZATION_FLAGS} ${COMPILER_FLAGS} ${CXXFLAGS}" \
#       ${CMAKE_ARGS} && \
#     ${BUILD_WRAPPER} cmake --build .;
#   else
#     cd test && \
#     CFLAGS="${ARCH_FLAGS} ${OPTIMIZATION_FLAGS} ${COMPILER_FLAGS} ${CFLAGS}" CXXFLAGS="${ARCH_FLAGS} ${OPTIMIZATION_FLAGS} ${COMPILER_FLAGS} ${CXXFLAGS}" meson build && \
#     cd build && \
#     ninja --verbose;
#   fi
# - |
#   if [ "${RUN_TESTS}" = "true" ]; then
#     if [ "windows" != "${TRAVIS_OS_NAME}" ]; then
#       ${TEST_WRAPPER} ./run-tests${EXECUTABLE_EXTENSION}
#     else
#       ctest --output-on-failure --interactive-debug-mode 0 -C Debug -V
#     fi
#   fi

after_success:
# - |
#   if [ "${BUILD_TYPE}" = "Coverage" ]; then
#     bash <(curl -s https://codecov.io/bash) -y "${TRAVIS_BUILD_DIR}"/.codecov.yml ${GCOV}
#   fi

notifications:
  email: false
