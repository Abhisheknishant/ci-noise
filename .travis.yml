language: c
dist: bionic
cache: ccache
branches:
  except:
    - /^(wip\/)?(appveyor|drone|gh\-actions|azure|circleci)(\-.+)?$/

env:
  global:
  - BUILD_TYPE="Coverage"
  - ARCH_FLAGS="-march=native"
  - BUILD_CPP_TESTS=ON
  - CMAKE_GENERATOR='Ninja'
  - RUN_TESTS=true
  - OPTIMIZATION_FLAGS=''
  - DIAGNOSTIC_FLAGS='-Wall -Wextra -Werror'

jobs:
  include:
      - name: "gcc-8 x86"
        if: branch != master OR type == pull_request
        arch: amd64
        compiler: gcc-8
        env:
          - C_COMPILER=gcc-8
          - CXX_COMPILER=g++-8
          - ARCH_FLAGS="-m32"
        addons:
        apt:
          packages:
            - libc6:i386
            - libc6-dev:i386
            - gcc-8:i386
            - g++-8:i386
            - cpp-8:i386
            - binutils:i386
            - binutils-i686-linux-gnu:i386

      - name: "aarch64"
        if: branch != master OR type == pull_request
        arch: arm64

before_install:
- |
  if [ "${CMAKE_GENERATOR}" = "Ninja" ]; then
    case "${TRAVIS_OS_NAME}" in
      "linux")
        sudo apt-get install -y ninja-build parallel
        ;;
      "osx")
        brew install ninja
        ;;
      "windows")
        choco install ninja
        ;;
    esac
  fi

- cat /proc/cpuinfo || true
- cat /proc/meminfo || true

## If we use the matrix to set CC/CXX Travis overwrites the values,
## so instead we use C/CXX_COMPILER, then copy the values to CC/CXX
## here (after Travis has set CC/CXX).
- |
  if [ -n "${C_COMPILER}" ]; then
    export CC="${C_COMPILER}"
  fi
  if [ -n "${CXX_COMPILER}" ]; then
    export CXX="${CXX_COMPILER}"
  fi

script:
- mkdir "${TRAVIS_BUILD_DIR}/test/build" && cd "${TRAVIS_BUILD_DIR}/test/build"
- |
  ${CONFIGURE_WRAPPER} cmake .. \
    -G "${CMAKE_GENERATOR}" \
    -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" \
    -DBUILD_CPP_TESTS=${BUILD_CPP_TESTS} \
    -DCMAKE_CROSSCOMPILING_EMULATOR="${TEST_WRAPPER}" \
    -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
    -DCMAKE_C_FLAGS="${ARCH_FLAGS} ${OPTIMIZATION_FLAGS} ${DIAGNOSTIC_FLAGS} ${COMPILER_FLAGS} ${CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${ARCH_FLAGS} ${OPTIMIZATION_FLAGS} ${DIAGNOSTIC_FLAGS} ${COMPILER_FLAGS} ${CXXFLAGS}" \
    ${CMAKE_ARGS} || (cat CMakeFiles/CMakeError.log && false) && \
  ${BUILD_WRAPPER} cmake --build .
- |
  if [ "${RUN_TESTS}" = "true" ]; then
    if [ "windows" != "${TRAVIS_OS_NAME}" ]; then
      if command -v parallel; then
        echo Parallel tests
        ${TEST_WRAPPER} ./test/run-tests${EXECUTABLE_EXTENSION} --list | grep -oP '^/([^\/]+)/([^\/]+)' | sort -u | xargs parallel ${TEST_WRAPPER} ./test/run-tests${EXECUTABLE_EXTENSION} --color always {} :::
      else
        echo Serial tests
        ${TEST_WRAPPER} ./run-tests${EXECUTABLE_EXTENSION}
      fi
    else
      ctest --output-on-failure --interactive-debug-mode 0 -C Debug -V
    fi
  fi

notifications:
  email: false
